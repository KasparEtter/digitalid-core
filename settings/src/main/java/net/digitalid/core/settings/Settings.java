package net.digitalid.core.settings;

import javax.annotation.Generated;
import javax.annotation.Nonnull;

import net.digitalid.utility.annotations.method.Pure;
import net.digitalid.utility.contracts.exceptions.PreconditionViolationException;
import net.digitalid.utility.functional.failable.FailableConsumer;
import net.digitalid.utility.generator.annotations.generators.GenerateConverter;
import net.digitalid.utility.generator.annotations.generators.GenerateSubclass;
import net.digitalid.utility.property.nonnullable.WritableNonNullableProperty;
import net.digitalid.utility.validation.annotations.generation.Default;
import net.digitalid.utility.validation.annotations.generation.Recover;
import net.digitalid.utility.validation.annotations.size.MaxSize;
import net.digitalid.utility.validation.annotations.type.Immutable;
import net.digitalid.utility.validation.auxiliary.None;

import net.digitalid.database.annotations.transaction.NonCommitting;

import net.digitalid.core.concept.ConceptIndexBuilder;
import net.digitalid.core.concept.ConceptInfo;
import net.digitalid.core.concept.ConceptInfoBuilder;
import net.digitalid.core.concept.CoreConcept;
import net.digitalid.core.concept.annotations.GenerateProperty;
import net.digitalid.core.entity.NonHostEntity;
import net.digitalid.core.property.RequiredAuthorization;
import net.digitalid.core.property.nonnullable.NonNullableConceptProperty;
import net.digitalid.core.restrictions.Restrictions;

/**
 * This class models the settings of a digital identity.
 */
@Immutable
@GenerateSubclass
@GenerateConverter
public abstract class Settings extends CoreConcept<NonHostEntity, Object> {
    
    /* -------------------------------------------------- Index -------------------------------------------------- */
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateInfo' annotation in the subclass.
    static final @Nonnull ConceptInfo<NonHostEntity, Object, Settings> INFO = ConceptInfoBuilder.<NonHostEntity, Object, Settings>withService(SERVICE).withName("Settings").withIndex(ConceptIndexBuilder.buildWithFactory(SettingsSubclass::new)).withConverter(SettingsConverter.INSTANCE).build();
    
    /**
     * Returns the potentially cached settings of the given entity that might not yet exist in the database.
     */
    @Pure
    @Recover
    @NonCommitting
    public static @Nonnull Settings of(@Nonnull NonHostEntity entity) {
        return SettingsSubclass.INFO.getIndex().get(entity, None.OBJECT);
    }
    
//    /* -------------------------------------------------- Required Authorization -------------------------------------------------- */
//    
//    /**
//     * Stores the required authorization to set the property and see its changes.
//     */
//    public static final @Nonnull RequiredAuthorization<Settings> REQUIRED_AUTHORIZATION = new RequiredAuthorization<Settings>() {
//        
//        @Pure
//        @Override
//        public @Nonnull String getStateFilter(@Nonnull ReadOnlyAgentPermissions permissions, @Nonnull Restrictions restrictions, @Nullable Agent agent) {
//            return Database.toBoolean(restrictions.isClient());
//        }
//        
//        @Pure
//        @Override
//        public @Nonnull ReadOnlyAgentPermissions getRequiredPermissions(@Nonnull Settings password) {
//            return FreezableAgentPermissions.GENERAL_WRITE; // TODO
//        }
//        
//    };
//    
//    /* -------------------------------------------------- Value Validator -------------------------------------------------- */
//    
//    /**
//     * Stores the value validator of the password property.
//     */
//    // TODO: No longer necessary for the new class ShortString.
//    public static final @Nonnull ValueValidator<String> VALUE_VALIDATOR = new ValueValidator<String>() {
//        @Pure
//        @Override
//        public boolean isValid(@Nonnull String value) {
//            return value.length() <= 50;
//        }
//    };
    
    /* -------------------------------------------------- Value Property -------------------------------------------------- */
    
    static final @Nonnull RequiredAuthorization<Settings, String> PASSWORD_AUTHORIZATION = NonNullableRequiredAuthorizationBuilder.withRequiredRestrictionsToExecuteMethod((concept, value) -> Restrictions.ONLY_FOR_CLIENTS).withRequiredRestrictionsToSeeMethod((concept, value) -> Restrictions.ONLY_FOR_CLIENTS).build();
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateProperty' annotation in the subclass.
    private static final @Nonnull FailableConsumer<String, PreconditionViolationException> PASSWORD_VALIDATOR = new FailableConsumer<String, PreconditionViolationException>() {
            
            @Impure
            @Override
            public void consume(@Captured String password) throws PreconditionViolationException {
                Require.that(password.length() <= 50).orThrow("The password may be at most 50 characters long.");
            }
            
    }
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateProperty' annotation in the subclass.
    private static final @Nonnull NonNullableConceptPropertyInfo<@MaxSize(50) String, Settings, NonHostEntity> PASSWORD = NonNullableConceptPropertyInfoBuilder.withConceptInfo(INFO).withPropertyName("password").withValueConverter(StringConverter.INSTANCE).withRequiredAuthorization(PASSWORD_AUTHORIZATION).withValueValidator(PASSWORD_VALIDATOR).withDefaultValue("").build();
    
    /*
    
    The static property setup/information object needs:
    - the setup/index/information object of the concept
    - the name of the property (for semantic types and database names)
    - the converter of/for the encapsulated value (in case of indexed properties also for the key)
    - required authorization object [read/generated from values of the @GenerateProperty annotation]
    - value validator object [read/generated from the annotations on the generic type in the property declaration] -> could probably also be passed as a value of the @GenerateProperty annotation
    - default value (in case of a NonNullableProperty) [read from the @Default annotation on the property method] -> could also be passed as a value of the @GenerateProperty annotation
    
    */
    
    private final @Nonnull NonNullableConceptProperty password = NonNullableConceptProperty.with(PASSWORD, this);
    
    /**
     * Stores the password of these settings.
     */
    @Pure
    @Default("\"\"")
    @GenerateProperty()
    @Generated("TODO in Subclass") // TODO: Only the abstract method is declared here.
//    @GenerateProperty(requiredRestrictionsToExecuteMethod = "true, false, false, null", requiredRestrictionsToSeeMethod = "true, false, false, null")
    public @Nonnull WritableNonNullableProperty<@MaxSize(50) String> password() {
        return password;
    }
    
}
