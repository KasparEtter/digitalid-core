package net.digitalid.core.settings;

import javax.annotation.Generated;
import javax.annotation.Nonnull;

import net.digitalid.utility.annotations.method.Impure;
import net.digitalid.utility.annotations.method.Pure;
import net.digitalid.utility.annotations.ownership.Captured;
import net.digitalid.utility.contracts.Require;
import net.digitalid.utility.contracts.exceptions.PreconditionViolationException;
import net.digitalid.utility.functional.failable.FailableConsumer;
import net.digitalid.utility.generator.annotations.generators.GenerateConverter;
import net.digitalid.utility.generator.annotations.generators.GenerateSubclass;
import net.digitalid.utility.validation.annotations.generation.Recover;
import net.digitalid.utility.validation.annotations.size.MaxSize;
import net.digitalid.utility.validation.annotations.type.Immutable;

import net.digitalid.database.annotations.transaction.NonCommitting;
import net.digitalid.database.auxiliary.None;
import net.digitalid.database.property.value.WritablePersistentValueProperty;

import net.digitalid.core.concept.ConceptModule;
import net.digitalid.core.concept.ConceptModuleBuilder;
import net.digitalid.core.concept.CoreConcept;
import net.digitalid.core.entity.NonHostEntity;
import net.digitalid.core.entity.NonHostEntityConverter;
import net.digitalid.core.identification.identity.SemanticType;
import net.digitalid.core.property.value.SynchronizedValuePropertyTable;
import net.digitalid.core.property.value.SynchronizedValuePropertyTableBuilder;
import net.digitalid.core.property.value.ValuePropertyRequiredAuthorization;
import net.digitalid.core.property.value.ValuePropertyRequiredAuthorizationBuilder;
import net.digitalid.core.property.value.WritableSynchronizedValuePropertyBuilder;
import net.digitalid.core.restrictions.Restrictions;
import net.digitalid.core.restrictions.RestrictionsBuilder;

/**
 * This class models the settings of a digital identity.
 */
@Immutable
@GenerateSubclass
@GenerateConverter
public abstract class Settings extends CoreConcept<NonHostEntity, None> {
    
    /* -------------------------------------------------- Index -------------------------------------------------- */
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateConceptModule' annotation in the subclass.
    static final @Nonnull ConceptModule<NonHostEntity, None, Settings> MODULE = ConceptModuleBuilder.<NonHostEntity, None, Settings>withName("Settings").withService(SERVICE).withConceptFactory(SettingsSubclass::new).withEntityConverter(NonHostEntityConverter.INSTANCE).withConceptConverter(SettingsConverter.INSTANCE).build();
    
    @Pure
    @Override
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateConceptModule' annotation in the subclass.
    public @Nonnull ConceptModule<NonHostEntity, None, Settings> getConceptModule() {
        return MODULE;
    }
    
    /**
     * Returns the potentially cached settings of the given entity that might not yet exist in the database.
     */
    @Pure
    @Recover
    @NonCommitting
    public static @Nonnull Settings of(@Nonnull NonHostEntity entity) {
        return SettingsSubclass.MODULE.getConceptIndex().get(entity, None.INSTANCE);
    }
    
    /* -------------------------------------------------- Value Property -------------------------------------------------- */
    
    static final @Nonnull ValuePropertyRequiredAuthorization<NonHostEntity, None, Settings, String> PASSWORD_AUTHORIZATION = ValuePropertyRequiredAuthorizationBuilder.<NonHostEntity, None, Settings, String>withRequiredRestrictionsToExecuteMethod((concept, value) -> RestrictionsBuilder.withOnlyForClients(true).withWriteToNode(true).build()).withRequiredRestrictionsToSeeMethod((concept, value) -> Restrictions.ONLY_FOR_CLIENTS).build();
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateSynchronizedProperty' annotation in the subclass.
    private static final @Nonnull FailableConsumer<String, PreconditionViolationException> PASSWORD_VALIDATOR = new FailableConsumer<String, PreconditionViolationException>() {
            
            @Impure
            @Override
            public void consume(@Captured String password) throws PreconditionViolationException {
                Require.that(password.length() <= 50).orThrow("The password may be at most 50 characters long but was $.", password);
            }
            
    };
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateSynchronizedProperty' annotation in the subclass.
    private static final @Nonnull SynchronizedValuePropertyTable<NonHostEntity, None, Settings, @Nonnull @MaxSize(50) String, Void> PASSWORD_TABLE = SynchronizedValuePropertyTableBuilder.<NonHostEntity, None, Settings, String, Void>withName("password").withValueConverter(null /* StringConverter.INSTANCE */).withDefaultValue("").withParentModule(MODULE).withRequiredAuthorization(PASSWORD_AUTHORIZATION).withActionType(SemanticType.map("password.settings@core.digitalid.net")).build();
    
    /*
    
    The static property setup/information object needs:
    - the setup/index/information object of the concept
    - the name of the property (for semantic types and database names)
    - the converter of/for the encapsulated value (in case of indexed properties also for the key)
    - required authorization object [read/generated from values of the @GenerateProperty annotation]
    - value validator object [read/generated from the annotations on the generic type in the property declaration] -> could probably also be passed as a value of the @GenerateProperty annotation
    - default value (in case of a NonNullableProperty) [read from the @Default annotation on the property method] -> could also be passed as a value of the @GenerateProperty annotation
    
    */
    
    @Generated("TODO in Subclass") // TODO: This should be generated by the '@GenerateSynchronizedProperty' annotation in the subclass.
    private final @Nonnull WritablePersistentValueProperty<Settings, @Nonnull @MaxSize(50) String> password = WritableSynchronizedValuePropertyBuilder.<NonHostEntity, None, Settings, String>withConcept(this).withTable(PASSWORD_TABLE).build();
    
    /**
     * Stores the password of these settings.
     */
    @Pure
//    @Default("\"\"") // TODO: "The generation annotation may only be used on abstract getters."
    @Generated("TODO in Subclass") // TODO: Only the abstract method should be declared here.
//    @GenerateSynchronizedProperty // TODO: Only allowed on abstract methods.
    public @Nonnull WritablePersistentValueProperty<Settings, @Nonnull @MaxSize(50) String> password() {
        return password;
    }
    
}
